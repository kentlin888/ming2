import React, { PureComponent } from 'react'
import PropTypes from 'prop-types';
import ReactDOM from 'react-dom'
// import './demo1.css'
// //import ProductCard from '../../js/react/components/ProductCard.jsx'
// import CategoryCard from '../../js/react/components/CategoryCard.jsx'
// import Shopitem from '../../js/react/components/Shopitem.jsx'
// import NewProducts from '../../../adminData/NewProducts.json'
// import FirebaseMJS from '../../js/firebase/FirebaseMJS.js'
// import ProductListSearch from '../../js/react/containers/ProductListSearch.jsx'
//let _ = require('lodash')
require('@babel/polyfill')

let root = document.querySelector('#root')

let firebaseConfig = require('../../projectConfig/firebaseProj.config.json')
//console.log("LOG: ~ file: demo1.js ~ line 15 ~ firebaseConfig", firebaseConfig)

let firebase = require('firebase/app');
require('firebase/firestore')
// require('firebase/functions')
// require('firebase/storage')
require('firebase/auth')
firebase.initializeApp(firebaseConfig);
// let newArrayCategory = FirebaseMJS.getProductInfo_GroupedItems_ByCategory(_,NewProducts)
// console.log("LOG: ~ file: demo1.js ~ line 14 ~ newArrayCategory", newArrayCategory)


// 牛肉麵
// 單價:$50
// 金額小計:$150
// - 採購數量:3 +
let data = {
    name:"牛肉麵",
    price:50,
    amount:5
}



const FIRESTORE_COLLECTION={
    OrderInfo:"OrderInfo",
    aa:"aa"
}

let order = {a:"ss"}
addOrderInfo(order)
let db = firebase.firestore()


function addOrderInfo(orderInfo) {
    db = firebase.firestore()
    //clear function props
    
    //console.log("LOG: ~ file: demo1.js ~ line 60 ~ addOrderInfo ~ FIRESTORE_COLLECTION.OrderInfo", FIRESTORE_COLLECTION)
    let autoNum_DocRef = db.collection(FIRESTORE_COLLECTION.OrderInfo).doc("--AutoNum--");

    /** identify the AutoNum is generated by self, not from other user.*/
    let orderIdentityToken = Math.random().toString(36).substring(2, 7) // 36 carry bit, ignore '0.', get 8 char
    let overrideAutoNum = {
    
        docid: "--AutoNum--",
        autoNum: firebase.firestore.FieldValue.increment(1),
        updateDateTime: firebase.firestore.FieldValue.serverTimestamp(),
        orderIdentityToken: orderIdentityToken,
        // lastId:'',
        // lastTime:firebase.firestore.FieldValue.serverTimestamp(),
    }

    
    // (node:15072) UnhandledPromiseRejectionWarning: FirebaseError: 
    // Firestore transactions require all reads to be executed before all writes.
    //autoNumData.updateDateTime always exist in db, update first.
    let self = this
    return autoNum_DocRef.set(overrideAutoNum, {
            merge: true
        })
        .then(() => {
            return db.runTransaction(async (transaction) => {
                let thisData = {
                    autoNum_Doc: undefined
                }
                // get autoNum_Doc
                await transaction.get(autoNum_DocRef)
                    .then((autoNum_Doc) => {
                        thisData.autoNum_Doc = autoNum_Doc
                        return autoNum_DocRef
                        //return autoNum_DocRef
                    })
                return 
                let autoNumData = thisData.autoNum_Doc.data()
                if (autoNumData.orderIdentityToken !== orderIdentityToken)
                    throw new Error('addOrderInfo collision occurs with other user (different orderIdentityToken).')

                let autoNewNumber = autoNumData.autoNum //updated from beginning.

                let nowToday = autoNumData.updateDateTime; //updated from beginning                
                nowToday = getDate_From_Firestore_TimeStamp(nowToday) //convert format to js Date

                let preDayTime
                if (autoNumData.lastTime)
                    preDayTime = autoNumData.lastTime
                else
                    preDayTime = autoNumData.updateDateTime; //updated from beginning
                preDayTime = getDate_From_Firestore_TimeStamp(preDayTime) //convert format to js Date

                let newOrderId_obj = FirebaseMJS.getNewOrderInfoId(preDayTime, nowToday, autoNewNumber)

                //update lastId + lastTime
                transaction.update(autoNum_DocRef, {
                    autoNum: newOrderId_obj.autoNum,
                    lastId: newOrderId_obj.lastId,
                    lastTime: nowToday //newOrderId_obj.lastTime
                })

                let newDocRef = db.collection(FIRESTORE_COLLECTION.OrderInfo).doc(newOrderId_obj.lastId)
                transaction.set(newDocRef, order)
                return newDocRef
            })

        })
        .catch((error) => {
            console.log("LOG: ~ file: FirebaseMJS.js ~ line 266 ~ FirebaseMJS ~ addOrderInfo ~ error", error)
            throw error
        })
        
}



const aa = <div>BB</div>
//<CategoryCard data={data}></CategoryCard>


ReactDOM.render(aa, root)