// Generated by Selenium IDE
let webdriver = require('selenium-webdriver')
const {
    Builder,
    By,
    Key,
    until
} = require('selenium-webdriver')
const assert = require('assert')
let fs = require('fs')
let path = require('path')

//-------chrome options
let chrome = require('selenium-webdriver/chrome')
var options = new chrome.Options();
options.addArguments("--start-maximized"); // 启动就最大化，而不是像后面再使用 maximize() 那样之后再最大化
// options.addArguments("--disable-popup-blocking");
// options.addArguments("no-sandbox");
options.addArguments("disable-extensions");
// options.addArguments("no-default-browser-check");

//if (chrome.getDefaultService() == null) {
    var service;
    
    let pathDriver = path.join(__dirname, 'chromedriver.exe')
    
    // exe 安装之后在根目录找到chromedriver.exe
    if (fs.existsSync(pathDriver)) {
        //console.log(path.join(__dirname, 'chromedriver.exe'));
        
        service = new chrome.ServiceBuilder(path.join(__dirname, 'chromedriver.exe')).build();
    }
    //service = new chrome.ServiceBuilder(pathDriver).build();

    // 开发过程中寻找 chromedriver
    // if(fs.existsSync(path.join(__dirname, './chromedriver.exe'))) {
    //     console.log(path.join(__dirname, './chromedriver.exe'));
    //     service = new chrome.ServiceBuilder(path.join(__dirname, './chromedriver.exe')).build();
    // }

    chrome.setDefaultService(service);
//}


// DesiredCapabilities capabilities;
// ChromeDriverService chromeDriverService
// ChromeOptions options = new ChromeOptions();//empty
// chromeDriverService = ChromeDriverService.CreateDefaultService(sDriverFolderPath, sDriverFileName);
//let WebDriver = new ChromeDriver(chromeDriverService, options);


//this.timeout(30000)
    let driver = new webdriver.Builder()
        .setChromeOptions(options)
        .withCapabilities(webdriver.Capabilities.chrome())
        .forBrowser('chrome')
        .build();
        //driver = await new Builder().forBrowser('chrome').build()
    let vars = {}
    
    gogogo();
    async function gogogo(){
        const TIMEOUT = 300000000
        //driver.manage().timeouts().implicitlyWait(5, TimeUnit.SECONDS);
        await driver.manage().setTimeouts({
            implicit: TIMEOUT,
            pageLoad: TIMEOUT,
            script: TIMEOUT
        })
        await driver.get("http://localhost:3000/")
        //await driver.manage().window().setRect(1900, 1020)
        await driver.findElement(By.linkText("登入")).click()
        // await driver.findElement(By.css(".btnEmailSignin:nth-child(6)")).click()
        // await driver.findElement(By.id("spanDisplayEmail")).click()
        // assert(await driver.findElement(By.id("spanDisplayEmail")).getText() == "ice4kimo@yahoo.com.tw")
        // await driver.findElement(By.id("aLogout")).click()
    }
    


        //await driver.quit();