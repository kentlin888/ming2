File {
    _events: [Object: null prototype] {},
    _eventsCount: 0,
    _maxListeners: undefined,
    metadata: {
      kind: 'storage#object',
      id: 'ming1-d8ff5.appspot.com/object-name.jpg/1593254895644506',
      selfLink: 'https://www.googleapis.com/storage/v1/b/ming1-d8ff5.appspot.com/o/object-name.jpg',
      mediaLink: 'https://storage.googleapis.com/download/storage/v1/b/ming1-d8ff5.appspot.com/o/object-name.jpg?generation=1593254895644506&alt=media',
      name: 'object-name.jpg',
      bucket: 'ming1-d8ff5.appspot.com',
      generation: '1593254895644506',
      metageneration: '1',
      contentType: 'image/jpeg',
      storageClass: 'STANDARD',
      size: '108633',
      md5Hash: 'foY3WdOGJbDPuhraFjtkpg==',
      cacheControl: 'public, max-age=31536000',
      crc32c: 'zJSIng==',
      etag: 'CNre3YDpoeoCEAE=',
      timeCreated: '2020-06-27T10:48:15.644Z',
      updated: '2020-06-27T10:48:15.644Z',
      timeStorageClassUpdated: '2020-06-27T10:48:15.644Z',
      acl: [ [Object], [Object] ],
      owner: {
        entity: 'user-firebase-adminsdk-tp6g4@ming1-d8ff5.iam.gserviceaccount.com'
      }
    },
    baseUrl: '/o',
    parent: Bucket {
      _events: [Object: null prototype] {},
      _eventsCount: 0,
      _maxListeners: undefined,
      metadata: {},
      baseUrl: '/b',
      parent: Storage {
        baseUrl: 'https://storage.googleapis.com/storage/v1',
        apiEndpoint: 'storage.googleapis.com',
        timeout: undefined,
        globalInterceptors: [],
        interceptors: [],
        packageJson: [Object],
        projectId: 'ming1-d8ff5',
        projectIdRequired: false,
        Promise: [Function: Promise],
        makeAuthenticatedRequest: [Function],
        authClient: [GoogleAuth],
        getCredentials: [Function: bound getCredentials],
        acl: [Object],
        getBucketsStream: [Function (anonymous)],
        getHmacKeysStream: [Function (anonymous)]
      },
      id: 'ming1-d8ff5.appspot.com',
      createMethod: [Function: bound wrapper],
      methods: {
        create: [Object],
        delete: [Object],
        exists: [Object],
        get: [Object],
        getMetadata: [Object],
        setMetadata: [Object]
      },
      interceptors: [],
      pollIntervalMs: undefined,
      Promise: [Function: Promise],
      name: 'ming1-d8ff5.appspot.com',
      storage: Storage {
        baseUrl: 'https://storage.googleapis.com/storage/v1',
        apiEndpoint: 'storage.googleapis.com',
        timeout: undefined,
        globalInterceptors: [],
        interceptors: [],
        packageJson: [Object],
        projectId: 'ming1-d8ff5',
        projectIdRequired: false,
        Promise: [Function: Promise],
        makeAuthenticatedRequest: [Function],
        authClient: [GoogleAuth],
        getCredentials: [Function: bound getCredentials],
        acl: [Object],
        getBucketsStream: [Function (anonymous)],
        getHmacKeysStream: [Function (anonymous)]
      },
      userProject: undefined,
      acl: Acl {
        owners: [Object],
        readers: [Object],
        writers: [Object],
        pathPrefix: '/acl',
        request_: [Function: bound request],
        default: [Acl]
      },
      iam: Iam {
        request_: [Function: bound request],
        resourceId_: 'buckets/[object Promise]'
      },
      getFilesStream: [Function (anonymous)],
      [Symbol(kCapture)]: false
    },
    id: 'object-name.jpg',
    createMethod: undefined,
    methods: {
      delete: { reqOpts: [Object] },
      exists: { reqOpts: [Object] },
      get: { reqOpts: [Object] },
      getMetadata: { reqOpts: [Object] },
      setMetadata: { reqOpts: [Object] }
    },
    interceptors: [],
    pollIntervalMs: undefined,
    Promise: [Function: Promise],
    create: undefined,
    bucket: Bucket {
      _events: [Object: null prototype] {},
      _eventsCount: 0,
      _maxListeners: undefined,
      metadata: {},
      baseUrl: '/b',
      parent: Storage {
        baseUrl: 'https://storage.googleapis.com/storage/v1',
        apiEndpoint: 'storage.googleapis.com',
        timeout: undefined,
        globalInterceptors: [],
        interceptors: [],
        packageJson: [Object],
        projectId: 'ming1-d8ff5',
        projectIdRequired: false,
        Promise: [Function: Promise],
        makeAuthenticatedRequest: [Function],
        authClient: [GoogleAuth],
        getCredentials: [Function: bound getCredentials],
        acl: [Object],
        getBucketsStream: [Function (anonymous)],
        getHmacKeysStream: [Function (anonymous)]
      },
      id: 'ming1-d8ff5.appspot.com',
      createMethod: [Function: bound wrapper],
      methods: {
        create: [Object],
        delete: [Object],
        exists: [Object],
        get: [Object],
        getMetadata: [Object],
        setMetadata: [Object]
      },
      interceptors: [],
      pollIntervalMs: undefined,
      Promise: [Function: Promise],
      name: 'ming1-d8ff5.appspot.com',
      storage: Storage {
        baseUrl: 'https://storage.googleapis.com/storage/v1',
        apiEndpoint: 'storage.googleapis.com',
        timeout: undefined,
        globalInterceptors: [],
        interceptors: [],
        packageJson: [Object],
        projectId: 'ming1-d8ff5',
        projectIdRequired: false,
        Promise: [Function: Promise],
        makeAuthenticatedRequest: [Function],
        authClient: [GoogleAuth],
        getCredentials: [Function: bound getCredentials],
        acl: [Object],
        getBucketsStream: [Function (anonymous)],
        getHmacKeysStream: [Function (anonymous)]
      },
      userProject: undefined,
      acl: Acl {
        owners: [Object],
        readers: [Object],
        writers: [Object],
        pathPrefix: '/acl',
        request_: [Function: bound request],
        default: [Acl]
      },
      iam: Iam {
        request_: [Function: bound request],
        resourceId_: 'buckets/[object Promise]'
      },
      getFilesStream: [Function (anonymous)],
      [Symbol(kCapture)]: false
    },
    storage: Storage {
      baseUrl: 'https://storage.googleapis.com/storage/v1',
      apiEndpoint: 'storage.googleapis.com',
      timeout: undefined,
      globalInterceptors: [],
      interceptors: [],
      packageJson: {
        _from: '@google-cloud/storage@^4.1.2',
        _id: '@google-cloud/storage@4.7.0',
        _inBundle: false,
        _integrity: 'sha512-f0guAlbeg7Z0m3gKjCfBCu7FG9qS3M3oL5OQQxlvGoPtK7/qg3+W+KQV73O2/sbuS54n0Kh2mvT5K2FWzF5vVQ==',
        _location: '/@google-cloud/storage',
        _phantomChildren: [Object],
        _requested: [Object],
        _requiredBy: [Array],
        _resolved: 'https://registry.npmjs.org/@google-cloud/storage/-/storage-4.7.0.tgz',
        _shasum: 'a7466086a83911c7979cc238d00a127ffb645615',
        _spec: '@google-cloud/storage@^4.1.2',
        _where: 'C:\\Users\\Administrator\\Desktop\\vsProj\\ming1\\node_modules\\firebase-admin',
        author: [Object],
        bugs: [Object],
        bundleDependencies: false,
        dependencies: [Object],
        deprecated: false,
        description: 'Cloud Storage Client Library for Node.js',
        devDependencies: [Object],
        engines: [Object],
        files: [Array],
        homepage: 'https://github.com/googleapis/nodejs-storage#readme',
        keywords: [Array],
        license: 'Apache-2.0',
        main: './build/src/index.js',
        name: '@google-cloud/storage',
        repository: [Object],
        scripts: [Object],
        types: './build/src/index.d.ts',
        version: '4.7.0'
      },
      projectId: 'ming1-d8ff5',
      projectIdRequired: false,
      Promise: [Function: Promise],
      makeAuthenticatedRequest: [Function: makeAuthenticatedRequest] {
        getCredentials: [Function: bound getCredentials],
        authClient: [GoogleAuth]
      },
      authClient: GoogleAuth {
        checkIsGCE: undefined,
        jsonContent: [Object],
        cachedCredential: [JWT],
        _cachedProjectId: 'ming1-d8ff5',
        keyFilename: undefined,
        scopes: [Array],
        clientOptions: undefined
      },
      getCredentials: [Function: bound getCredentials],
      acl: {
        OWNER_ROLE: 'OWNER',
        READER_ROLE: 'READER',
        WRITER_ROLE: 'WRITER'
      },
      getBucketsStream: [Function (anonymous)],
      getHmacKeysStream: [Function (anonymous)]
    },
    kmsKeyName: undefined,
    userProject: undefined,
    name: 'object-name.jpg',
    acl: Acl {
      owners: {
        addAllAuthenticatedUsers: [Function (anonymous)],
        deleteAllAuthenticatedUsers: [Function (anonymous)],
        addAllUsers: [Function (anonymous)],
        deleteAllUsers: [Function (anonymous)],
        addDomain: [Function (anonymous)],
        deleteDomain: [Function (anonymous)],
        addGroup: [Function (anonymous)],
        deleteGroup: [Function (anonymous)],
        addProject: [Function (anonymous)],
        deleteProject: [Function (anonymous)],
        addUser: [Function (anonymous)],
        deleteUser: [Function (anonymous)]
      },
      readers: {
        addAllAuthenticatedUsers: [Function (anonymous)],
        deleteAllAuthenticatedUsers: [Function (anonymous)],
        addAllUsers: [Function (anonymous)],
        deleteAllUsers: [Function (anonymous)],
        addDomain: [Function (anonymous)],
        deleteDomain: [Function (anonymous)],
        addGroup: [Function (anonymous)],
        deleteGroup: [Function (anonymous)],
        addProject: [Function (anonymous)],
        deleteProject: [Function (anonymous)],
        addUser: [Function (anonymous)],
        deleteUser: [Function (anonymous)]
      },
      writers: {
        addAllAuthenticatedUsers: [Function (anonymous)],
        deleteAllAuthenticatedUsers: [Function (anonymous)],
        addAllUsers: [Function (anonymous)],
        deleteAllUsers: [Function (anonymous)],
        addDomain: [Function (anonymous)],
        deleteDomain: [Function (anonymous)],
        addGroup: [Function (anonymous)],
        deleteGroup: [Function (anonymous)],
        addProject: [Function (anonymous)],
        deleteProject: [Function (anonymous)],
        addUser: [Function (anonymous)],
        deleteUser: [Function (anonymous)]
      },
      pathPrefix: '/acl',
      request_: [Function: bound request]
    },
    [Symbol(kCapture)]: false
  }
  